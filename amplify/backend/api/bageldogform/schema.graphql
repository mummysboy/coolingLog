# Bagel Dog Form GraphQL Schema
# This database handles only the Bagel Dog Cooking & Cooling form type

# Global auth rule for testing - in production you'll want more specific auth rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# User model for employees, supervisors, and admins
type User @model {
  id: ID!
  initials: String!
  name: String!
  role: UserRole!
  certificationNumber: String
  email: String
  isActive: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Bagel Dog Form Entry model
type BagelDogFormEntry @model @auth(rules: [{ allow: public }]) {
  id: ID!
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [BagelDogFormRow!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Bagel Dog-specific fields
  frankFlavorSizeTable: AWSJSON
  bagelDogPreShipmentReview: BagelDogPreShipmentReview
  
  # Admin comments and resolution
  adminComments: [AdminComment!]
  resolvedErrors: [String!]
  
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# Bagel Dog Form Row for individual entries
type BagelDogFormRow {
  type: String
  rack: String
  
  # Standard CCP stages
  ccp1: StageData
  ccp2: StageData
  coolingTo80: StageData
  coolingTo54: StageData
  finalChill: StageData
  
  # Add explicit fields for better GraphQL generation
  __typename: String
}

# Stage data embedded type
type StageData {
  temperature: Float
  time: AWSDateTime
  isValid: Boolean
  correctiveAction: String
  employeeInitials: String
  notes: String
  dataLog: Boolean
}

# Pre Shipment Review for Bagel Dog form
type BagelDogPreShipmentReview {
  date: String
  results: String
  signature: String
}

# Admin comment for forms
type AdminComment {
  id: ID!
  adminInitial: String!
  timestamp: AWSDateTime!
  comment: String!
}

# Initial entry model for managing employee initials
type InitialEntry @model {
  id: ID!
  initials: String!
  name: String!
  isActive: Boolean!
  createdBy: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Enums
enum UserRole {
  EMPLOYEE
  SUPERVISOR
  ADMIN
}

enum FormStatus {
  COMPLETE
  IN_PROGRESS
  ERROR
}

# Custom input types for mutations
input StageDataInput {
  temperature: Float
  time: AWSDateTime
  isValid: Boolean
  correctiveAction: String
  employeeInitials: String
  notes: String
  dataLog: Boolean
}

input BagelDogFormRowInput {
  type: String
  rack: String
  ccp1: StageDataInput
  ccp2: StageDataInput
  coolingTo80: StageDataInput
  coolingTo54: StageDataInput
  finalChill: StageDataInput
}

input BagelDogPreShipmentReviewInput {
  date: String
  results: String
  signature: String
}

input AdminCommentInput {
  id: ID!
  adminInitial: String!
  timestamp: AWSDateTime!
  comment: String!
}

input CreateBagelDogFormEntryInput {
  id: String
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [BagelDogFormRowInput!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Bagel Dog-specific fields
  frankFlavorSizeTable: AWSJSON
  bagelDogPreShipmentReview: BagelDogPreShipmentReviewInput
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

input UpdateBagelDogFormEntryInput {
  id: String!
  date: AWSDateTime
  dateCreated: AWSDateTime
  lastTextEntry: AWSDateTime
  formInitial: String
  status: String
  title: String
  
  # Row entries (1-9)
  entries: [BagelDogFormRowInput!]
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Bagel Dog-specific fields
  frankFlavorSizeTable: AWSJSON
  bagelDogPreShipmentReview: BagelDogPreShipmentReviewInput
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

# Custom queries
type Query {
  # Bagel Dog Form queries
  getBagelDogFormsByDateRange(startDate: AWSDateTime!, endDate: AWSDateTime!): [BagelDogFormEntry]
  getTodaysBagelDogForms: [BagelDogFormEntry]
  getBagelDogFormsByStatus(status: FormStatus!): [BagelDogFormEntry]
  getBagelDogFormsByInitial(initial: String!): [BagelDogFormEntry]
}

# Custom mutations
type Mutation {
  # Bagel Dog Form mutations
  updateBagelDogFormStatus(
    formId: ID!
    status: FormStatus!
  ): BagelDogFormEntry
  
  addAdminComment(
    formId: ID!
    comment: AdminCommentInput!
  ): BagelDogFormEntry
  
  resolveError(
    formId: ID!
    errorId: String!
  ): BagelDogFormEntry
}

# Subscriptions for real-time updates
type Subscription {
  # Bagel Dog Form subscriptions
  onBagelDogFormEntryCreated: BagelDogFormEntry
    @aws_subscribe(mutations: ["createBagelDogFormEntry"])
  
  onBagelDogFormEntryUpdated: BagelDogFormEntry
    @aws_subscribe(mutations: ["updateBagelDogFormEntry"])
  
  onBagelDogFormStatusUpdated: BagelDogFormEntry
    @aws_subscribe(mutations: ["updateBagelDogFormStatus"])
}


