# Food Chilling Log GraphQL Schema - Multi-Table Structure
# This database handles all form types with separate tables for each

# Global auth rule for testing - in production you'll want more specific auth rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# Cooking and Cooling Form Entry model - Separate table
type CookingCoolingFormEntry @model @auth(rules: [{ allow: public }]) {
  id: ID!
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [CookingCoolingFormRow!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Admin comments and resolution
  adminComments: [AdminComment!]
  resolvedErrors: [String!]
  
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# Piroshki Form Entry model - Separate table
type PiroshkiFormEntry @model @auth(rules: [{ allow: public }]) {
  id: ID!
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [PiroshkiFormRow!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Piroshki-specific fields
  quantityAndFlavor: AWSJSON
  preShipmentReview: PreShipmentReview
  
  # Admin comments and resolution
  adminComments: [AdminComment!]
  resolvedErrors: [String!]
  
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# Bagel Dog Form Entry model - Separate table
type BagelDogFormEntry @model @auth(rules: [{ allow: public }]) {
  id: ID!
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [BagelDogFormRow!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Bagel Dog-specific fields
  frankFlavorSizeTable: AWSJSON
  bagelDogPreShipmentReview: BagelDogPreShipmentReview
  
  # Admin comments and resolution
  adminComments: [AdminComment!]
  resolvedErrors: [String!]
  
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# Cooking and Cooling Form Row for individual entries
type CookingCoolingFormRow {
  type: String
  rack: String
  
  # CCP 1 - Temperature Must reach 166°F or greater
  ccp1: StageData
  # CCP 2 - 127°F or greater
  ccp2: StageData
  # 80°F or below within 105 minutes
  coolingTo80: StageData
  # 54°F or below within 4.75 hr
  coolingTo54: StageData
  # Chill Continuously to 39°F or below
  finalChill: StageData
  
  # Add explicit fields for better GraphQL generation
  __typename: String
}

# Piroshki Form Row for individual entries
type PiroshkiFormRow {
  type: String
  rack: String
  
  # Piroshki-specific stages
  heatTreating: StageData
  ccp2_126: StageData
  ccp2_80: StageData
  ccp2_55: StageData
  
  # Standard CCP stages
  ccp1: StageData
  ccp2: StageData
  coolingTo80: StageData
  coolingTo54: StageData
  finalChill: StageData
  
  # Add explicit fields for better GraphQL generation
  __typename: String
}

# Bagel Dog Form Row for individual entries
type BagelDogFormRow {
  type: String
  rack: String
  
  # Standard CCP stages
  ccp1: StageData
  ccp2: StageData
  coolingTo80: StageData
  coolingTo54: StageData
  finalChill: StageData
  
  # Add explicit fields for better GraphQL generation
  __typename: String
}

# Stage data embedded type
type StageData {
  temperature: Float
  time: AWSDateTime
  isValid: Boolean
  correctiveAction: String
  employeeInitials: String
  notes: String
  dataLog: Boolean
}

# Pre Shipment Review for Piroshki form
type PreShipmentReview {
  date: String
  initials: String
  results: String
}

# Pre Shipment Review for Bagel Dog form
type BagelDogPreShipmentReview {
  date: String
  results: String
  signature: String
}

# Admin comment for forms
type AdminComment {
  id: ID!
  adminInitial: String!
  timestamp: AWSDateTime!
  comment: String!
}

# Enums
enum FormStatus {
  COMPLETE
  IN_PROGRESS
  ERROR
}

# Custom input types for mutations
input StageDataInput {
  temperature: Float
  time: AWSDateTime
  isValid: Boolean
  correctiveAction: String
  employeeInitials: String
  notes: String
  dataLog: Boolean
}

input CookingCoolingFormRowInput {
  type: String
  rack: String
  ccp1: StageDataInput
  ccp2: StageDataInput
  coolingTo80: StageDataInput
  coolingTo54: StageDataInput
  finalChill: StageDataInput
}

input PiroshkiFormRowInput {
  type: String
  rack: String
  heatTreating: StageDataInput
  ccp2_126: StageDataInput
  ccp2_80: StageDataInput
  ccp2_55: StageDataInput
  ccp1: StageDataInput
  ccp2: StageDataInput
  coolingTo80: StageDataInput
  coolingTo54: StageDataInput
  finalChill: StageDataInput
}

input BagelDogFormRowInput {
  type: String
  rack: String
  ccp1: StageDataInput
  ccp2: StageDataInput
  coolingTo80: StageDataInput
  coolingTo54: StageDataInput
  finalChill: StageDataInput
}

input PreShipmentReviewInput {
  date: String
  initials: String
  results: String
}

input BagelDogPreShipmentReviewInput {
  date: String
  results: String
  signature: String
}

input AdminCommentInput {
  id: ID!
  adminInitial: String!
  timestamp: AWSDateTime!
  comment: String!
}

input CreateCookingCoolingFormEntryInput {
  id: String
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [CookingCoolingFormRowInput!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

input UpdateCookingCoolingFormEntryInput {
  id: String!
  date: AWSDateTime
  dateCreated: AWSDateTime
  lastTextEntry: AWSDateTime
  formInitial: String
  status: String
  title: String
  
  # Row entries (1-9)
  entries: [CookingCoolingFormRowInput!]
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

input CreatePiroshkiFormEntryInput {
  id: String
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [PiroshkiFormRowInput!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Piroshki-specific fields
  quantityAndFlavor: AWSJSON
  preShipmentReview: PreShipmentReviewInput
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

input UpdatePiroshkiFormEntryInput {
  id: String!
  date: AWSDateTime
  dateCreated: AWSDateTime
  lastTextEntry: AWSDateTime
  formInitial: String
  status: String
  title: String
  
  # Row entries (1-9)
  entries: [PiroshkiFormRowInput!]
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Piroshki-specific fields
  quantityAndFlavor: AWSJSON
  preShipmentReview: PreShipmentReviewInput
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

input CreateBagelDogFormEntryInput {
  id: String
  date: AWSDateTime!
  dateCreated: AWSDateTime!
  lastTextEntry: AWSDateTime!
  formInitial: String!
  status: String!
  title: String
  
  # Row entries (1-9)
  entries: [BagelDogFormRowInput!]!
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Bagel Dog-specific fields
  frankFlavorSizeTable: AWSJSON
  bagelDogPreShipmentReview: BagelDogPreShipmentReviewInput
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

input UpdateBagelDogFormEntryInput {
  id: String!
  date: AWSDateTime
  dateCreated: AWSDateTime
  lastTextEntry: AWSDateTime
  formInitial: String
  status: String
  title: String
  
  # Row entries (1-9)
  entries: [BagelDogFormRowInput!]
  
  # Bottom section
  thermometerNumber: String
  ingredients: AWSJSON
  lotNumbers: AWSJSON
  correctiveActionsComments: String
  
  # Bagel Dog-specific fields
  frankFlavorSizeTable: AWSJSON
  bagelDogPreShipmentReview: BagelDogPreShipmentReviewInput
  
  # Admin comments and resolution
  adminComments: [AdminCommentInput!]
  resolvedErrors: [String!]
}

# Custom queries
type Query {
  # Cooking and Cooling Form queries
  getCookingCoolingFormsByDateRange(startDate: AWSDateTime!, endDate: AWSDateTime!): [CookingCoolingFormEntry]
  getTodaysCookingCoolingForms: [CookingCoolingFormEntry]
  getCookingCoolingFormsByStatus(status: FormStatus!): [CookingCoolingFormEntry]
  getCookingCoolingFormsByInitial(initial: String!): [CookingCoolingFormEntry]
  
  # Piroshki Form queries
  getPiroshkiFormsByDateRange(startDate: AWSDateTime!, endDate: AWSDateTime!): [PiroshkiFormEntry]
  getTodaysPiroshkiForms: [PiroshkiFormEntry]
  getPiroshkiFormsByStatus(status: FormStatus!): [PiroshkiFormEntry]
  getPiroshkiFormsByInitial(initial: String!): [PiroshkiFormEntry]
  
  # Bagel Dog Form queries
  getBagelDogFormsByDateRange(startDate: AWSDateTime!, endDate: AWSDateTime!): [BagelDogFormEntry]
  getTodaysBagelDogForms: [BagelDogFormEntry]
  getBagelDogFormsByStatus(status: FormStatus!): [BagelDogFormEntry]
  getBagelDogFormsByInitial(initial: String!): [BagelDogFormEntry]
}

# Custom mutations
type Mutation {
  # Cooking and Cooling Form mutations
  updateCookingCoolingFormStatus(
    formId: ID!
    status: FormStatus!
  ): CookingCoolingFormEntry
  
  addAdminComment(
    formId: ID!
    comment: AdminCommentInput!
  ): CookingCoolingFormEntry
  
  resolveError(
    formId: ID!
    errorId: String!
  ): CookingCoolingFormEntry
  
  # Piroshki Form mutations
  updatePiroshkiFormStatus(
    formId: ID!
    status: FormStatus!
  ): PiroshkiFormEntry
  
  addPiroshkiAdminComment(
    formId: ID!
    comment: AdminCommentInput!
  ): PiroshkiFormEntry
  
  resolvePiroshkiError(
    formId: ID!
    errorId: String!
  ): PiroshkiFormEntry
  
  # Bagel Dog Form mutations
  updateBagelDogFormStatus(
    formId: ID!
    status: FormStatus!
  ): BagelDogFormEntry
  
  addBagelDogAdminComment(
    formId: ID!
    comment: AdminCommentInput!
  ): BagelDogFormEntry
  
  resolveBagelDogError(
    formId: ID!
    errorId: String!
  ): BagelDogFormEntry
}

# Subscriptions for real-time updates
type Subscription {
  # Cooking and Cooling Form subscriptions
  onCookingCoolingFormEntryCreated: CookingCoolingFormEntry
    @aws_subscribe(mutations: ["createCookingCoolingFormEntry"])
  
  onCookingCoolingFormEntryUpdated: CookingCoolingFormEntry
    @aws_subscribe(mutations: ["updateCookingCoolingFormEntry"])
  
  onCookingCoolingFormStatusUpdated: CookingCoolingFormEntry
    @aws_subscribe(mutations: ["updateCookingCoolingFormStatus"])
  
  # Piroshki Form subscriptions
  onPiroshkiFormEntryCreated: PiroshkiFormEntry
    @aws_subscribe(mutations: ["createPiroshkiFormEntry"])
  
  onPiroshkiFormEntryUpdated: PiroshkiFormEntry
    @aws_subscribe(mutations: ["updatePiroshkiFormEntry"])
  
  onPiroshkiFormStatusUpdated: PiroshkiFormEntry
    @aws_subscribe(mutations: ["updatePiroshkiFormStatus"])
  
  # Bagel Dog Form subscriptions
  onBagelDogFormEntryCreated: BagelDogFormEntry
    @aws_subscribe(mutations: ["createBagelDogFormEntry"])
  
  onBagelDogFormEntryUpdated: BagelDogFormEntry
    @aws_subscribe(mutations: ["updateBagelDogFormEntry"])
  
  onBagelDogFormStatusUpdated: BagelDogFormEntry
    @aws_subscribe(mutations: ["updateBagelDogFormStatus"])
}

